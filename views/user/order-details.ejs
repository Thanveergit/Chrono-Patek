<%-include("../layout/commonHeader")%>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@mdi/font/css/materialdesignicons.min.css">
<link rel="stylesheet" href="/css/orderDetails.css">

<!-- Breadcrumb -->
<div class="container p-t-75" id="breadcrumb-container">
    <div class="bread-crumb flex-w p-l-25 p-r-15 p-t-30 p-lr-0-lg">
        <a href="/" class="stext-109 cl8 hov-cl1 trans-04">
            Home
            <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
        </a>
        <a href="/profile" class="stext-109 cl8 hov-cl1 trans-04">
            Profile
            <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
        </a>
        <a href="/viewOrders" class="stext-109 cl8 hov-cl1 trans-04">
            Orders
            <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
        </a>
        <span class="stext-109 cl4">
            View Orders
        </span>
    </div>
</div>

<div class="container mt-5">
    <div class="card">
        <div class="card-header text-center">
            <h4 class="text-dark">Order Details</h4>
            <p>Ordered on <%= new Date(order.date).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %>  |  Order ID : <%= order.orderId %></p>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-5">
                    <h6 class="font-weight-bold text-dark">Shipping Address</h6>
                    <p class="mt-2">
                        <%= order.address.name %><br>
                        +91 <%= order.address.phone %><br>
                        <%= order.address.house %> (H)<br>
                        <%= order.address.district %><br>
                        <%= order.address.city %>, <%= order.address.state %> <%= order.address.pincode %><br>
                    </p>
                </div>
                <div class="col-md-4">
                    <h6 class="font-weight-bold text-dark">Payment Method</h6>
                    <p class="mt-2"><%= order.paymentMethod %></p>
                </div>
                <div class="col-md-3">
                    <h6 class="font-weight-bold text-dark">Payment Status</h6>
                    <p class="mt-2"><%= order.paymentStatus %></p>
                    
                    <% if (order.paymentMethod === 'razorpay' && order.paymentStatus === 'failed') { %>
                        <button type="button" class="btn btn-sm btn-paynow mt-3" onclick="payNow('<%= order._id %>')">
                            <i></i> Pay Now
                        </button>
                    <% } %>
                </div>
                <% if (order.items.every(item => item.itemStatus === 'Delivered' || item.itemStatus === 'Cancelled')) { %>
                    <div class="row ml-0">
                        <div class="col-md-12 text-right">
                            <button class="btn btn-sm btn-cancel mt-3" onclick="downloadInvoice()">
                                <i class="mdi mdi-download"></i> Download Invoice
                            </button>
                        </div>                        
                    </div>
                <% } %>
            </div>  
            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="table-responsive">
                        <table class="table mt-2">
                            <thead class="text-center">
                                <tr>
                                    <th scope="col">Product Name</th>
                                    <th scope="col">Category</th>
                                    <th scope="col">Image</th>
                                    <th scope="col">Quantity</th>
                                    <th scope="col">Final Price</th>
                                    <th scope="col">Order Status</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% order.items.forEach(function(item) { %>
                                    <tr>
                                        
                                        <td><%= item.productName %></td>
                                        <td><%= item.categoryName %></td>
                                        <td><img src="/uploads/product-images/<%= item.image %>" alt="<%= item.productName %>" class="img-fluid" style="max-width: 100px;"></td>
                                        <td><%= item.quantity %></td>
                                        <td><%= (item.quantity * (item.finalPrice && item.finalPrice !== item.price ? item.finalPrice : item.price)).toFixed(2) %></td>
                                        <td class="<%= item.itemStatus === 'Cancelled' ? 'text-danger' : item.itemStatus === 'Delivered' ? 'text-success' : item.itemStatus === 'Returned' ? 'text-primary' :  item.itemStatus === 'Return Pending' ? 'text-primary' : '' %>"><%= item.itemStatus %></td>
                                        
                                        <td>
                                            <% if ((item.itemStatus !== 'Cancelled' && item.itemStatus !== 'Delivered' && item.itemStatus !== 'Returned' && item.itemStatus !== 'Return Pending') 
                                                ) { %>
                                                <button type="button" class="btn btn-sm btn-cancel" onclick="confirmCancelOrder('<%= item.productId %>', '<%= order._id %>')">
                                                    <i class="fa fa-times"></i> Cancel
                                                </button>
                                            <% } else if (item.itemStatus === 'Delivered') { %>
                                                <button type="button" class="btn btn-sm btn-return" onclick="showReturnModal('<%= item.productId %>', '<%= order._id %>')">
                                                    <i class="fa fa-undo"></i> Return
                                                </button>
                                                <% } %>
                                                </td>
                                                

                                        
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>                        
                    </div>
                </div>
            </div>
            <div class="row mt-2">
                <div class="col-md-6">
                    <h6 class="font-weight-bold text-dark">Order Summary After Discount</h6>
                    <p class="font-weight-bolder text-dark">
                        Item(s) Subtotal : <%= order.items.reduce((acc, item) => acc + (item.finalPrice && item.finalPrice !== item.price ? item.finalPrice : item.price) * item.quantity, 0).toFixed(2) %><br>
                       After The Discount  : <%= order.totalPrice.toFixed(2) %><br>
                    </p>
                </div>
            </div>                        
        </div>
    </div>
</div>

<!-- Modal HTML -->
<div class="modal fade modal-custom" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="returnModalLabel">Return Product ?</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="returnForm">
                    <div class="form-group">
                        <label for="returnReason">Reason for Return</label>
                        <select class="form-control" id="returnReason" required>
                            <option value="" disabled selected>Select a reason</option>
                            <option value="Damaged product"><small>Damaged product</small></option>
                            <option value="Wrong item received"><small>Wrong item received</small></option>
                            <option value="Item not as described"><small>Item not as described</small></option>
                            <option value="Duplicate Order"><small>Duplicate Order</small></option>
                            <option value="Changed mind"><small>Changed mind</small></option>
                            <option value="Better price available"><small>Better price available</small></option>
                            <option value="Other"><small>Other</small></option>
                        </select>                        
                    </div>
                    <input type="hidden" id="returnProductId">
                    <input type="hidden" id="returnOrderId">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btn-sm" data-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-sm btnSubmitReq" form="returnForm">Submit Request</button>
            </div>
        </div>
    </div>
</div>

<table class="invoiceTable" style="display: none;">
    <thead>
        <tr>
            <th>Product Name</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Status</th>
            <th>Total</th>
        </tr>
    </thead>
    <tbody>
        <% order.items.forEach(function(item) { 
            const price = item.finalPrice && item.finalPrice !== item.price ? item.finalPrice : item.price;
            const total = price * item.quantity;
        %>
        <tr>
            <td><%= item.productName %></td>
            <td><%= price.toFixed(2) %></td>
            <td><%= item.quantity %></td>
            <td><%= item.itemStatus %></td>
            <td><%= total.toFixed(2) %></td>
        </tr>
        <% }); %>
    </tbody>
</table>

<%- include("../layout/commonFooter.ejs") %>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>





<!-- Cancel order -->
<script>
    function confirmCancelOrder(productId, orderId) {
    Swal.fire({
        text: "Do you want to cancel this order?",
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
    }).then((result) => {
        if (result.isConfirmed) {
            cancelOrder(productId, orderId);
        }
    });
}

function cancelOrder(productId, orderId) {
    axios.post('/cancelOrder', { productId, orderId })
        .then(response => {
            if (response.data.success) {
                Swal.fire(
                    'Cancelled!',
                    'Your order item has been cancelled.',
                    'success'
                ).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire(
                    'Error!',
                    response.data.message || 'There was an error cancelling your order item.',
                    'error'
                );
            }
        })
        .catch(error => {
            console.error('There was an error cancelling the order item:', error);
            Swal.fire(
                'Error!',
                'There was an error cancelling your order item.',
                'error'
            );
        });
}

</script>

<!-- Return Product -->
<script>
    function showReturnModal(productId, orderId) {
    $('#returnProductId').val(productId);
    $('#returnOrderId').val(orderId);
    $('#returnModal').modal('show');
}

function submitReturnRequest() {
    const productId = document.getElementById('returnProductId').value;
    const orderId = document.getElementById('returnOrderId').value;
    const reason = document.getElementById('returnReason').value;

    if (!reason) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Please select a reason for the return.',
            timer: 3000,
            showConfirmButton: false,
            toast: true,
            position: 'bottom'
        });
        return;
    }

    axios.post('/returnProduct', { productId, orderId, reason })
        .then(response => {
            if (response.data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: response.data.message,
                    timer: 2000,
                    showConfirmButton: false,
                    toast: true,
                    position: 'bottom'
                });

                // Reload the page after a delay
                setTimeout(() => {
                    location.reload();
                }, 2000);
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: response.data.message || 'There was an error submitting your return request.',
                    timer: 3000,
                    showConfirmButton: false,
                    toast: true,
                    position: 'bottom'
                });
            }
        })
        .catch(error => {
            console.error('There was an error submitting the return request:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'There was an error submitting your return request.',
                timer: 3000,
                showConfirmButton: false,
                toast: true,
                position: 'bottom'
            });
        });
}

document.getElementById('returnForm').addEventListener('submit', function(event) {
    event.preventDefault();
    submitReturnRequest();
});


document.getElementById('returnForm').addEventListener('submit', function(event) {
    event.preventDefault();
    submitReturnRequest();
});

</script>

<script>
    function downloadInvoice() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
        
        // Set brand colors
        const primaryColor = [0, 0, 0];  // Black
        const secondaryColor = [44, 62, 80];  // Dark gray
        
        // Add watermark logo
        doc.setFillColor(...primaryColor);
        doc.setFontSize(60);
        doc.setTextColor(245, 245, 245); // Light gray for watermark
        doc.setFont("helvetica", "bold");
        doc.text("chronoPATEK", 45, 140, null, 45, "center");
        
        // Header section with modern design
        doc.setFillColor(...primaryColor);
        doc.rect(0, 0, 210, 40, "F");
        
        // Company name in white
        doc.setFontSize(28);
        doc.setTextColor(255, 255, 255);
        doc.setFont("helvetica", "bold");
        doc.text("chronoPATEK", 15, 25);
        
        // Add "INVOICE" text with styling
        doc.setFontSize(16);
        doc.setTextColor(255, 255, 255);
        doc.text("INVOICE", 170, 25);
        
        // Invoice details section
        doc.setFontSize(10);
        doc.setTextColor(...secondaryColor);
        doc.setFont("helvetica", "normal");
        
        // Left column - Company Details
        doc.text([
            "chronoPATEK Watches Ltd.",
            "123 Luxury Avenue",
            "Watch District, WD1 2LP",
            "Tel: +1 234 567 8900",
            "Email: support@chronopatek.com"
        ], 15, 50);
        
        // Right column - Invoice Details
        doc.text([
            `Invoice No: #<%= order.orderId %>`,
            `Date: <%= new Date(order.date).toLocaleDateString() %>`,
            `Due Date: <%= new Date(new Date().setDate(new Date(order.date).getDate() + 30)).toLocaleDateString() %>`
        ], 140, 50);
        
        // Bill To section with modern box
        doc.setDrawColor(...primaryColor);
        doc.setLineWidth(0.1);
        doc.rect(15, 80, 80, 40);
        
        doc.setFontSize(12);
        doc.setFont("helvetica", "bold");
        doc.setTextColor(...primaryColor);
        doc.text("BILL TO", 20, 90);
        
        doc.setFontSize(10);
        doc.setFont("helvetica", "normal");
        doc.setTextColor(...secondaryColor);
        doc.text([
            `<%= order.address.name %>`,
            `<%= order.address.phone %>`,
            `<%= order.address.street || "" %>`,
            `<%= order.address.city || "" %>, <%= order.address.postalCode || "" %>`
        ], 20, 100);
        
        // Create items table with improved styling
        const items = [["Product", "Category", "Qty", "Price", "Total"]];
        <% order.items.forEach(item => { %>
            items.push([
                "<%= item.productName %>",
                "<%= item.categoryName %>",
                "<%= item.quantity %>",
                "₹<%= item.finalPrice || item.price %>",
                "₹<%= (item.quantity * (item.finalPrice || item.price)).toFixed(2) %>"
            ]);
        <% }); %>
        
        doc.autoTable({
            head: [items[0]],
            body: items.slice(1),
            startY: 130,
            theme: 'grid',
            headStyles: {
                fillColor: [...primaryColor],
                textColor: [255, 255, 255],
                fontSize: 11,
                fontStyle: 'bold',
                halign: 'center'
            },
            bodyStyles: {
                fillColor: [255, 255, 255],
                textColor: [...secondaryColor],
                fontSize: 10,
                halign: 'center'
            },
            alternateRowStyles: {
                fillColor: [249, 249, 249]
            },
            columnStyles: {
                0: { cellWidth: 60 },
                1: { cellWidth: 40 },
                2: { cellWidth: 25 },
                3: { cellWidth: 30 },
                4: { cellWidth: 30 }
            },
            margin: { top: 10 },
        });
        
        // Add total amount section with box
        const totalY = doc.lastAutoTable.finalY + 10;
        doc.setDrawColor(...primaryColor);
        doc.setLineWidth(0.1);
        doc.rect(130, totalY, 65, 25);
        
        doc.setFontSize(11);
        doc.setFont("helvetica", "bold");
        doc.setTextColor(...secondaryColor);
        doc.text("Total Amount:", 135, totalY + 10);
        doc.setFontSize(14);
        doc.text(`₹<%= order.totalPrice.toFixed(2) %>`, 135, totalY + 20);
        
        // Add footer with subtle design
        const footerY = totalY + 40;
        doc.setDrawColor(...primaryColor);
        doc.setLineWidth(0.5);
        doc.line(15, footerY, 195, footerY);
        
        doc.setFontSize(9);
        doc.setFont("helvetica", "normal");
        doc.setTextColor(128, 128, 128);
        doc.text([
            "Payment Terms: Net 30",
            "Please make checks payable to: chronoPATEK Watches Ltd.",
            "Thank you for your business!"
        ], 15, footerY + 10);
        
        // Save the PDF
        doc.save(`chronoPATEK_invoice_<%= order.orderId %>.pdf`);
    }
</script>


<script>
    async function payNow(orderId) {
    try {
        // Request to the backend to re-create Razorpay order and get payment details
        const response = await axios.post('/retry-payment', { orderId });

        if (response.data.success) {
            const options = {
                key: response.data.key,
                amount: response.data.amount,
                currency: "INR",
                name: "Your Company Name",
                description: "Order Payment",
                order_id: response.data.razorpayOrderId,
                handler: async function (paymentResponse) {
                    // Verify payment after successful completion
                    const verifyResponse = await axios.post('/verify-and-place-order', {
                        razorpay_payment_id: paymentResponse.razorpay_payment_id,
                        razorpay_order_id: paymentResponse.razorpay_order_id,
                        razorpay_signature: paymentResponse.razorpay_signature,
                    });

                    if (verifyResponse.data.success) {
                        // Update order status to success
                        const updateStatusResponse = await axios.post('/update-order-status', {
                            orderId: orderId,
                            paymentId: paymentResponse.razorpay_payment_id,  // Pass payment ID
                            signature: paymentResponse.razorpay_signature,   // Pass signature
                        });

                        if (updateStatusResponse.data.success) {
                            window.location.href = "/order-success";
                        } else {
                            window.location.href = "/order-failed";  // Handle status update failure
                        }
                    } else {
                        window.location.href = "/order-failed";
                    }
                },
                prefill: {
                    name: response.data.name,
                    email: response.data.email,
                    contact: response.data.phone
                },
                theme: {
                    color: "#FF5733"
                }
            };
            const rzp = new Razorpay(options);
            rzp.open();
        } else {
            alert("Failed to initiate payment. Please try again.");
        }
    } catch (error) {
        console.error("Payment Retry Error:", error);
        alert("An error occurred. Please try again later.");
    }
}


</script>



<style>
    @media (max-width: 767.98px) {
    #breadcrumb-container {
        padding-top: 0 !important;
    }
}
</style>